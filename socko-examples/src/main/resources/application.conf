
pekko {
  event-handlers = ["org.apache.pekko.event.slf4j.Slf4jEventHandler"]
  loglevel = "DEBUG"
}
    
pekko-config-example {

  # Server Name. If omitted, the default "WebServer" will be used. 
  server-name=PekkoConfigExample

  # Host name or IP address to bind to. Defaults to `localhost`.
  # Specifying `0.0.0.0` will bind to all addresses. 
  # You can also specify comma separated values. For example: `localhost,192.168.1.1`
  hostname=localhost
  
  # Port to bind to. Defaults to `8888`.
  port=9000
  
  # ----------------------------------------------------------
  # SSL configuration. If omitted, HTTPS will not be supported.
  # ----------------------------------------------------------
  # ssl-config {
  #   # Path to server private key store file (server certificates). This is required.
  #   key-store-file=/tmp/mykeystore
  #  
  #   # Password to access server private key store file. This is required.
  #   key-store-password=secret
  #  
  #   # Path to key store file for trusted remote public keys (client certificates).
  #   # If omitted, clients will not be authenticated using ssl.
  #   trust-store-file=
  #  
  #   # Path to key store file for trusted remote public keys (client certificates).
  #   # Required if `trust-store-file` is specified
  #   trust-store-password=
  # }
  
  # ----------------------------------------------------------
  # HTTP configuration. If omitted, defaults will be used.
  # ----------------------------------------------------------
  # http-config {
  #   # Maximum size of HTTP request in megabytes. Defaults to 4MB.
  #   max-length-in-mb=4
  #    
  #   # Maximum size the initial line. Defaults to 4096 characters.
  #   max-initial-line-length=4096
  #    
  #   # Maximum size of HTTP headers. Defaults to 8192 bytes.
  #   max-header-size-in-bytes=8192
  #    
  #   # Maximum size of HTTP chunks. Defaults to 8192 bytes.
  #   max-chunk-size-in-bytes=8192
  #    
  #   # Flag to indicate if we want to aggregate chunks. If `false`, your processor actors must be
  #   # able to handle `HttpChunkProcessingContext`
  #   aggregate-chunks=true
  # }  
}